{"version":3,"sources":["components/Game/Controls.jsx","components/files/game.jsx","components/Game/UseStyling.jsx","components/Game/Grid.jsx","components/files/presets.jsx","components/files/settings.jsx","components/Game/Settings.jsx","components/Game/GameClass.jsx","components/3D/Controls.jsx","components/3D/ThreePointVis.jsx","components/3D/Controls3D.jsx","components/files/game3D.jsx","components/files/presets3D.jsx","components/3D/Settings3D.jsx","components/settings/Rules.jsx","components/Rules.jsx","components/3D/Game3DClassTest.jsx","components/Home.jsx","components/Navbar.jsx","App.js","serviceWorker.js","index.js"],"names":["Controls","props","console","log","className","Button","content","icon","labelPosition","onClick","shuffle","disabled","playing","clear","next","isPlaying","stop","play","WORLD_SIZE","GEN_TIME","getWorldSize","gridSize","getSpeed","genSpeed","createWorld","Array","fill","map","aliveNeighbors","world","x","y","filter","cell","getNeighbors","living","length","nextGen","newWorld","alive","changeArray","arr","i","value","slice","randomFill","row","Math","round","random","setCustTag","name","styling","def","element","document","querySelector","classList","add","setCustClass","getElementsByClassName","UseStyling","Grid","onChange","renderCell","colorStyle","key","style","backgroundColor","onMouseDown","changeCell","renderRow","presetOptions","text","loadPreset","preset","half","floor","line","glider","cross","thickCross","plus","pulsar","diehard","gliderGunSE","gliderGunNE","duelingGliderGuns","infiniteGrowth","toBlock","x0","y0","toEgg","ship1","toMirror","axis","n","startX","startY","splice","colorOptions","gridSizeOptions","grid3DSizeOptions","generationSpeed","loadColorStyling","greyMode","darkMode","dayMode","randomColor","Settings","load","useState","settings","setSettings","as","width","Dropdown","placeholder","options","selection","e","Game","state","generation","changeState","color","setState","onClear","onPlay","interval","setInterval","onNext","onStop","clearInterval","onShuffle","onSettingStyle","update","setUpdate","this","React","Component","extend","TrackballControls","controls","useThree","camera","gl","useFrame","current","ref","args","domElement","dynamicDampingFactor","keys","mouseButtons","LEFT","THREE","PAN","MIDDLE","ZOOM","RIGHT","ROTATE","cam","ThreePointVis","position","skyColor","groundColor","intensity","plane","j","each","k","z","attach","Controls3D","WORLD_SIZE_3D","GEN_TIME_3D","RULES","El","Eu","Fl","Fu","setWorldSize","setSpeed","setRules","rules","getNeighbors3D","toLowerCase","box","start","ceil","boxSize","Settings3D","styleChange","changeStyle","a","b","c","d","id","Rules","onSubmit","onChangeRules","type","min","max","target","href","Home","Navbar","dimension","setDimension","onDimension","Header","textAlign","to","App","didUpdate","useEffect","exact","path","component","render","GameClass","Boolean","window","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.21940184.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Button } from \"semantic-ui-react\";\r\n// install semantic-ui-css as well\r\n\r\nconst Controls = (props) => {\r\n  console.log(\"Controls>props: \", props);\r\n  return (\r\n    <div>\r\n      <div className=\"controls\">\r\n        <Button\r\n          content=\"Shuffle\"\r\n          icon=\"random\"\r\n          labelPosition=\"right\"\r\n          onClick={props.shuffle}\r\n          disabled={props.playing}\r\n        />\r\n        <Button\r\n          content=\"Clear\"\r\n          icon=\"redo\"\r\n          labelPosition=\"right\"\r\n          onClick={props.clear}\r\n        />\r\n        <Button\r\n          content=\"Next\"\r\n          icon=\"right arrow\"\r\n          labelPosition=\"right\"\r\n          onClick={props.next}\r\n        />\r\n        {!props.isPlaying ? (\r\n          <Button content=\"Play\" icon=\"redo\" onClick={props.play} />\r\n        ) : (\r\n          <Button content=\"Stop\" icon=\"redo\" onClick={props.stop} />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Controls;\r\n","export let WORLD_SIZE = 70; //make this changeable\r\nexport let GEN_TIME = 100; //milliseconds until next generation\r\nexport const ALIVE = 1;\r\nexport const DEAD = 0;\r\n\r\nexport const getWorldSize = (gridSize) => {\r\n  console.log(\"getWorldSize: \", gridSize, WORLD_SIZE);\r\n  WORLD_SIZE = gridSize;\r\n  return WORLD_SIZE;\r\n};\r\n\r\nexport const getSpeed = (genSpeed) => {\r\n  GEN_TIME = genSpeed;\r\n  return GEN_TIME;\r\n};\r\n\r\nexport const createWorld = () => {\r\n  return Array(WORLD_SIZE)\r\n    .fill()\r\n    .map(() => Array(WORLD_SIZE).fill(DEAD));\r\n};\r\n\r\nexport const getNeighbors = (x, y) => {\r\n  return [\r\n    [x, y + 1],\r\n    [x, y - 1],\r\n    [x - 1, y - 1],\r\n    [x - 1, y],\r\n    [x - 1, y + 1],\r\n    [x + 1, y - 1],\r\n    [x + 1, y],\r\n    [x + 1, y + 1],\r\n  ].filter((cell) => {\r\n    // console.log(\"getNeighbors: \", cell[0], cell[1]);\r\n    // if x and y of cell are greater than 0 and inside the world perimeter:\r\n    return (\r\n      cell[0] >= 0 &&\r\n      cell[0] < WORLD_SIZE &&\r\n      cell[1] >= 0 &&\r\n      cell[1] < WORLD_SIZE\r\n    );\r\n  });\r\n};\r\n\r\nexport const aliveNeighbors = (world, x, y) => {\r\n  return getNeighbors(x, y).filter((living) => {\r\n    // console.log(\"living: \", living[0], living[1], world[living[0]][living[1]]);\r\n    return world[living[0]][living[1]] === ALIVE;\r\n  }).length;\r\n};\r\n\r\nexport const nextGen = (world) => {\r\n  // console.log(\"nextGen: \", world);\r\n  let newWorld = createWorld();\r\n  for (let x = 0; x < WORLD_SIZE; x++) {\r\n    for (let y = 0; y < WORLD_SIZE; y++) {\r\n      const alive = aliveNeighbors(world, x, y);\r\n      const cell = world[x][y];\r\n      newWorld[x][y] =\r\n        alive === 3 || (alive === 2 && cell === ALIVE) ? ALIVE : DEAD;\r\n    }\r\n  }\r\n  return newWorld;\r\n};\r\n\r\nexport const changeArray = (arr, i, value) => {\r\n  // console.log(\"changeArray: \", arr, i, value);\r\n  return [...arr.slice(0, i), value, ...arr.slice(i + 1)];\r\n};\r\n\r\nexport const randomFill = (world) => {\r\n  // map through each cell from \"world\",\r\n  // fill each cell with a 1 or 0 (Math.round(Math.random()))\r\n  return world.map((row) => row.map((cell) => Math.round(Math.random())));\r\n};\r\n","const setCustTag = (name, styling, def) => {\r\n  const element = document.querySelector(`${name}`);\r\n  element.className = `${def}`;\r\n  if (name === \"body\") {\r\n    element.classList.add(`${styling}`);\r\n  } else if (name === \"h2\") {\r\n    element.classList.add(`${styling}_text`);\r\n  }\r\n};\r\n\r\nconst setCustClass = (name, styling, def) => {\r\n  const element = document.getElementsByClassName(`${name}`);\r\n  if (name === \"navbar\") {\r\n    for (let i = 0; i < element.length; i++) {\r\n      element[i].className = `${def}`;\r\n      element[i].classList.add(`${styling}_nav`);\r\n      // console.log(\"setCustClass: \", element);\r\n    }\r\n  } else {\r\n    for (let i = 0; i < element.length; i++) {\r\n      element[i].className = `${def}`;\r\n      element[i].classList.add(`${styling}`);\r\n      // console.log(\"setCustClass: \", element);\r\n    }\r\n  }\r\n};\r\n\r\nconst UseStyling = (styling) => {\r\n  setCustTag(\"body\", styling, \"\");\r\n  setCustTag(\"h2\", styling, \"ui center aligned header title\");\r\n  setCustClass(\"GameDisplay\", styling, \"GameDisplay\");\r\n  setCustClass(\"navbar\", styling, \"navbar\");\r\n  //\r\n};\r\n\r\nexport default UseStyling;\r\n","import React from \"react\";\r\nimport { changeArray } from \"../files/game.jsx\";\r\nimport UseStyling from \"./UseStyling.jsx\";\r\n\r\nconst Grid = (props) => {\r\n  const { world, onChange, colorStyle } = props;\r\n\r\n  const changeCell = (cell, x, y) => {\r\n    const row = changeArray(world[y], x, cell ? 0 : 1);\r\n    const newWorld = changeArray(world, y, row);\r\n    onChange(newWorld);\r\n  };\r\n\r\n  const renderCell = (cell, x, y) => {\r\n    return (\r\n      <div\r\n        key={x}\r\n        className={`cell`}\r\n        style={{ backgroundColor: cell ? \"#424151\" : null }}\r\n        onMouseDown={() => changeCell(cell, x, y)}\r\n      />\r\n    );\r\n  };\r\n\r\n  const renderRow = (row, y) => (\r\n    <div className=\"row\" key={y}>\r\n      {row.map((cell, x) => renderCell(cell, x, y))}\r\n    </div>\r\n  );\r\n\r\n  return <div className=\"grid\">{world.map((row, y) => renderRow(row, y))}</div>;\r\n};\r\n\r\nexport default Grid;\r\n","import { ALIVE, WORLD_SIZE, createWorld } from \"./game\";\r\n\r\nexport const presetOptions = [\r\n  { key: \"line\", value: \"line\", text: \"Line\" },\r\n  { key: \"cross\", value: \"cross\", text: \"Cross\" },\r\n  { key: \"thickCross\", value: \"thickCross\", text: \"Thick Cross\" },\r\n  { key: \"plus\", value: \"plus\", text: \"Plus\" },\r\n  { key: \"glider\", value: \"glider\", text: \"Glider\" },\r\n  { key: \"pulsar\", value: \"pulsar\", text: \"Pulsar\" },\r\n  { key: \"diehard\", value: \"diehard\", text: \"Diehard\" },\r\n  {\r\n    key: \"gliderGunSE\",\r\n    value: \"gliderGunSE\",\r\n    text: \"Gosper Glider Gun (SE)\",\r\n  },\r\n  {\r\n    key: \"gliderGunNE\",\r\n    value: \"gliderGunNE\",\r\n    text: \"Gosper Glider Gun (NE)\",\r\n  },\r\n  {\r\n    key: \"duelingGliderGuns\",\r\n    value: \"duelingGliderGuns\",\r\n    text: \"Gosper Gliders Dueling\",\r\n  },\r\n  { key: \"infiniteGrowth\", value: \"infiniteGrowth\", text: \"Infinite Growth\" },\r\n  { key: \"testingPatterns\", value: \"testingPatterns\", text: \"testingPatterns\" },\r\n];\r\n\r\nexport const loadPreset = (preset) => {\r\n  let newWorld = createWorld();\r\n  const half = Math.floor(WORLD_SIZE / 2);\r\n  console.log(\"presets.jsx>loadPreset\", preset);\r\n  switch (preset) {\r\n    case \"line\":\r\n      return line(newWorld, half);\r\n    case \"glider\":\r\n      return glider(newWorld, half);\r\n    case \"cross\":\r\n      return cross(newWorld, half);\r\n    case \"thickCross\":\r\n      return thickCross(newWorld, half);\r\n    case \"plus\":\r\n      return plus(newWorld, half);\r\n    case \"pulsar\":\r\n      return pulsar(newWorld, half);\r\n    case \"diehard\":\r\n      return diehard(newWorld, half);\r\n    case \"gliderGunSE\":\r\n      return gliderGunSE(newWorld, half, 0, 0);\r\n    case \"gliderGunNE\":\r\n      return gliderGunNE(newWorld, half, 0, 0);\r\n    case \"duelingGliderGuns\":\r\n      return duelingGliderGuns(newWorld, half, 0, 0);\r\n    case \"infiniteGrowth\":\r\n      return infiniteGrowth(newWorld, half);\r\n    // case \"testingPatterns\":\r\n    //   return testingPatterns(newWorld, half);\r\n    default:\r\n      return newWorld;\r\n  }\r\n};\r\n\r\nconst toBlock = (world, x0, y0) => {\r\n  world[y0][x0] = ALIVE;\r\n  world[y0 - 1][x0] = ALIVE;\r\n  world[y0][x0 + 1] = ALIVE;\r\n  world[y0 - 1][x0 + 1] = ALIVE;\r\n  return world;\r\n};\r\n\r\nconst toEgg = (world, y0, x0) => {\r\n  world[x0][y0] = ALIVE;\r\n  world[x0][y0 + 6] = ALIVE;\r\n  world[x0][y0 + 4] = ALIVE;\r\n  world[x0][y0 + 7] = ALIVE;\r\n  for (let i = 0; i < 3; i++) {\r\n    world[x0 + 1 + i][y0 + i] = ALIVE;\r\n    world[x0 - 1 - i][y0 + i] = ALIVE;\r\n  }\r\n  world[x0 + 3][y0 + 3] = ALIVE;\r\n  world[x0 + 2][y0 + 5] = ALIVE;\r\n  world[x0 + 1][y0 + 6] = ALIVE;\r\n  world[x0 - 3][y0 + 3] = ALIVE;\r\n  world[x0 - 2][y0 + 5] = ALIVE;\r\n  world[x0 - 1][y0 + 6] = ALIVE;\r\n\r\n  return world;\r\n};\r\n\r\nconst ship1 = (world, y0, x0) => {\r\n  world[x0][y0] = ALIVE;\r\n  world[x0][y0 + 1] = ALIVE;\r\n  world[x0 - 1][y0] = ALIVE;\r\n  world[x0 - 1][y0 + 1] = ALIVE;\r\n  world[x0 - 2][y0 + 2] = ALIVE;\r\n  world[x0 - 2][y0 + 4] = ALIVE;\r\n  world[x0 - 3][y0 + 4] = ALIVE;\r\n  //mirror?\r\n  world[x0 + 1][y0] = ALIVE;\r\n  world[x0 + 1][y0 + 1] = ALIVE;\r\n  world[x0 + 1][y0 + 1] = ALIVE;\r\n  world[x0 + 2][y0 + 2] = ALIVE;\r\n  world[x0 + 2][y0 + 4] = ALIVE;\r\n  world[x0 + 3][y0 + 4] = ALIVE;\r\n  return world;\r\n};\r\n\r\nconst toMirror = (world, i, x, y, axis) => {\r\n  // world is the array, i is the starting reference, x/y are how much we're moving, axis is the axis to mirror\r\n  world[i + x][i + y] = ALIVE;\r\n  if (axis === \"x\") {\r\n    // mirror across x-axis\r\n    world[i - x][i + y] = ALIVE;\r\n  } else if (axis === \"y\") {\r\n    // mirror across y-axis\r\n    world[i + x][i - y] = ALIVE;\r\n  } else if (axis === \"dia\") {\r\n    // mirror across diagonal axis\r\n    world[i + y][i + x] = ALIVE;\r\n  } else if (axis === \"quad\") {\r\n    // mirror across x and y-axis (all 4 quadrants)\r\n    world[i + x][i + y] = ALIVE;\r\n    world[i - x][i + y] = ALIVE;\r\n    world[i + x][i - y] = ALIVE;\r\n    world[i - x][i - y] = ALIVE;\r\n  }\r\n  return world;\r\n};\r\n\r\nconst line = (world, half) => {\r\n  world[half].fill(ALIVE);\r\n  return world;\r\n};\r\n\r\nconst cross = (world, half) => {\r\n  const n = world.length - 1;\r\n  for (let i = 0; i < n / 2; i++) {\r\n    world = toMirror(world, half, i, i, \"quad\");\r\n  }\r\n  return world;\r\n};\r\n\r\nconst thickCross = (world, half) => {\r\n  const n = world.length - 8;\r\n  for (let i = 0; i < n / 2; i++) {\r\n    world = toMirror(world, half, i, i, \"quad\");\r\n    world = toMirror(world, half, i, i - 1, \"quad\");\r\n    world = toMirror(world, half, i, i - 2, \"quad\");\r\n    world = toMirror(world, half, i, i + 1, \"quad\");\r\n    world = toMirror(world, half, i, i + 2, \"quad\");\r\n  }\r\n  return world;\r\n};\r\n\r\nconst plus = (world, half) => {\r\n  const n = world.length - 1;\r\n  for (let i = 0; i <= n; i++) {\r\n    world = toMirror(world, 0, half, i, \"dia\");\r\n  }\r\n  return world;\r\n};\r\n\r\nconst glider = (world, startX, startY) => {\r\n  const half = Math.floor(WORLD_SIZE / 2);\r\n  const x = half;\r\n  const y = half;\r\n  world[x][y] = ALIVE;\r\n  world[x][y + 1] = ALIVE;\r\n  world[x][y + 2] = ALIVE;\r\n  world[x - 1][y] = ALIVE;\r\n  world[x - 2][y + 1] = ALIVE;\r\n  return world;\r\n};\r\n\r\nconst pulsar = (world, half) => {\r\n  for (let i = 2; i <= 4; i++) {\r\n    world = toMirror(world, half, i, 1, \"quad\");\r\n    world = toMirror(world, half, i, 6, \"quad\");\r\n    world = toMirror(world, half, 1, i, \"quad\");\r\n    world = toMirror(world, half, 6, i, \"quad\");\r\n  }\r\n  return world;\r\n};\r\n\r\nconst diehard = (world, half) => {\r\n  return world;\r\n};\r\n\r\nconst gliderGunSE = (world, half, x, y) => {\r\n  // BLOCKS\r\n  world = toBlock(world, half - 18 - x, half + 1 - y);\r\n  world = toBlock(world, half + 16 - x, half - 1 - y);\r\n  // Left side ship\r\n  world = toEgg(world, half - 8 - x, half + 1 - y);\r\n  // Right side ship\r\n  world = ship1(world, half + 2 - x, half - 1 - y);\r\n  return world;\r\n};\r\n\r\nconst gliderGunNE = (world, half, x, y) => {\r\n  // BLOCKS\r\n  world = toBlock(world, half - 18 - x, half - 1 - y);\r\n  world = toBlock(world, half + 16 - x, half + 1 - y);\r\n  // Left side ship\r\n  world = toEgg(world, half - 8 - x, half - 1 - y);\r\n  // Right side ship\r\n  world = ship1(world, half + 2 - x, half + 1 - y);\r\n  return world;\r\n};\r\n\r\nconst duelingGliderGuns = (world, half) => {\r\n  world = gliderGunSE(world, half, 8, 10);\r\n  world = gliderGunNE(world, half, 8, -10);\r\n  return world;\r\n};\r\n\r\nconst infiniteGrowth = (world, half) => {\r\n  const x = half - 20;\r\n  world[half].splice(x, 8, 1, 1, 1, 1, 1, 1, 1, 1);\r\n  world[half].splice(x + 9, 5, 1, 1, 1, 1, 1);\r\n  world[half].splice(x + 17, 3, 1, 1, 1);\r\n  world[half].splice(x + 26, 7, 1, 1, 1, 1, 1, 1, 1);\r\n  world[half].splice(x + 34, 5, 1, 1, 1, 1, 1);\r\n  return world;\r\n};\r\n","export const colorOptions = [\r\n  // { key: \"test\", value: \"test\", text: \"Test\" },\r\n  { key: \"greyMode\", value: \"greyMode\", text: \"Grey Mode\" },\r\n  { key: \"dayMode\", value: \"dayMode\", text: \"Day Mode\" },\r\n  { key: \"darkMode\", value: \"darkMode\", text: \"Dark Mode\" },\r\n];\r\n\r\nexport const gridSizeOptions = [\r\n  { key: \"25\", value: 25, text: \"25\" },\r\n  { key: \"30\", value: 30, text: \"30\" },\r\n  { key: \"35\", value: 35, text: \"35\" },\r\n  { key: \"40\", value: 40, text: \"40\" },\r\n  { key: \"45\", value: 45, text: \"45\" },\r\n  { key: \"50\", value: 50, text: \"50\" },\r\n  { key: \"55\", value: 55, text: \"55\" },\r\n  { key: \"60\", value: 60, text: \"60\" },\r\n  { key: \"65\", value: 65, text: \"65\" },\r\n  { key: \"70\", value: 70, text: \"70\" },\r\n  { key: \"75\", value: 75, text: \"75\" },\r\n  { key: \"80\", value: 80, text: \"80\" },\r\n  { key: \"85\", value: 85, text: \"85\" },\r\n  { key: \"90\", value: 90, text: \"90\" },\r\n  { key: \"95\", value: 95, text: \"95\" },\r\n  { key: \"100\", value: 100, text: \"100\" },\r\n  { key: \"125\", value: 125, text: \"125\" },\r\n  { key: \"150\", value: 150, text: \"150\" },\r\n  { key: \"200\", value: 200, text: \"200\" },\r\n];\r\n\r\nexport const grid3DSizeOptions = [\r\n  { key: \"5\", value: 5, text: \"5\" },\r\n  { key: \"10\", value: 10, text: \"10\" },\r\n  { key: \"15\", value: 15, text: \"15\" },\r\n  { key: \"20\", value: 20, text: \"20\" },\r\n  { key: \"25\", value: 25, text: \"25\" },\r\n  { key: \"30\", value: 30, text: \"30\" },\r\n  { key: \"35\", value: 35, text: \"35\" },\r\n  { key: \"40\", value: 40, text: \"40\" },\r\n];\r\n\r\nexport const generationSpeed = [\r\n  { key: \"10\", value: 10, text: \"10\" },\r\n  { key: \"25\", value: 25, text: \"25\" },\r\n  { key: \"50\", value: 50, text: \"50\" },\r\n  { key: \"90\", value: 90, text: \"90\" },\r\n  { key: \"100\", value: 100, text: \"100\" },\r\n  { key: \"500\", value: 500, text: \"500\" },\r\n  { key: \"1000\", value: 1000, text: \"1000\" },\r\n];\r\n\r\nexport const loadColorStyling = (colorStyle) => {\r\n  switch (colorStyle) {\r\n    case \"greyMode\":\r\n      return greyMode();\r\n    case \"darkMode\":\r\n      return darkMode();\r\n    case \"dayMode\":\r\n      return dayMode();\r\n    case \"randomColor\":\r\n      return randomColor();\r\n    default:\r\n      return \"greyMode\";\r\n  }\r\n};\r\n\r\nexport const loadGridSizeG = (size) => {\r\n  return size;\r\n};\r\n\r\nconst greyMode = (world, half) => {\r\n  // styling = greys\r\n};\r\n\r\nconst dayMode = (world) => {\r\n  // styling = fills with light colors\r\n};\r\n\r\nconst randomColor = (world, half) => {\r\n  // styling = fills with random colors\r\n};\r\n\r\nconst darkMode = (world, startX, startY) => {\r\n  // styling = dark mode colors\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { Dropdown, Button } from \"semantic-ui-react\";\r\nimport Presets from \"./Presets.jsx\";\r\n\r\nimport {\r\n  colorOptions,\r\n  gridSizeOptions,\r\n  generationSpeed,\r\n} from \"../files/settings.jsx\";\r\nimport { presetOptions } from \"../files/presets.jsx\";\r\n\r\nconst Settings = (props) => {\r\n  const { load, isPlaying } = props;\r\n\r\n  const [settings, setSettings] = useState({\r\n    preset: \"cross\",\r\n    colorStyle: \"purple\",\r\n    gridSize: 70,\r\n    generationSpeed: 100,\r\n  });\r\n\r\n  const onLoad = () => {\r\n    return load(settings);\r\n  };\r\n\r\n  return (\r\n    <div className=\"controls\">\r\n      <Button as=\"div\" labelPosition=\"left\" width=\"5px\">\r\n        <Dropdown\r\n          placeholder=\"Select a preset\"\r\n          options={presetOptions}\r\n          selection\r\n          className=\"label\"\r\n          disabled={isPlaying}\r\n          value={settings.preset}\r\n          onChange={(e, { value }) => {\r\n            setSettings({ ...settings, preset: `${value}` });\r\n          }}\r\n        />\r\n        <Dropdown\r\n          placeholder=\"Color Theme\"\r\n          options={colorOptions}\r\n          selection\r\n          className=\"label\"\r\n          disabled={isPlaying}\r\n          value={settings.colorStyle}\r\n          onChange={(e, { value }) => {\r\n            setSettings({ ...settings, colorStyle: `${value}` });\r\n          }}\r\n        />\r\n        <Dropdown\r\n          placeholder=\"Grid Size\"\r\n          options={gridSizeOptions}\r\n          selection\r\n          className=\"label_grid\"\r\n          disabled={isPlaying}\r\n          value={settings.gridSize}\r\n          onChange={(e, { value }) => {\r\n            setSettings({ ...settings, gridSize: value });\r\n          }}\r\n        />\r\n        <Dropdown\r\n          placeholder=\"Generation Speed\"\r\n          options={generationSpeed}\r\n          selection\r\n          className=\"label_grid\"\r\n          disabled={isPlaying}\r\n          value={settings.generationSpeed}\r\n          onChange={(e, { value }) => {\r\n            setSettings({ ...settings, generationSpeed: value });\r\n          }}\r\n        />\r\n        <Button content=\"Load\" onClick={onLoad} disabled={isPlaying} />\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Settings;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport Controls from \"./Controls.jsx\";\r\nimport Grid from \"./Grid.jsx\";\r\nimport Settings from \"./Settings.jsx\";\r\nimport { loadPreset } from \"../files/presets.jsx\";\r\nimport { loadColorStyling, loadGridSizeG } from \"../files/settings.jsx\";\r\nimport {\r\n  GEN_TIME,\r\n  createWorld,\r\n  nextGen,\r\n  randomFill,\r\n  getWorldSize,\r\n  getSpeed,\r\n} from \"../files/game.jsx\";\r\n\r\nimport UseStyling from \"./UseStyling.jsx\";\r\n\r\nimport \"./gameStyling.scss\";\r\n\r\nclass Game extends React.Component {\r\n  state = {\r\n    world: loadPreset(\"cross\"),\r\n    generation: 0,\r\n    isPlaying: false,\r\n    colorStyle: loadColorStyling(\"greyColor\"),\r\n    gridSize: loadGridSizeG(70),\r\n    genSpeed: 100,\r\n  };\r\n\r\n  changeState = (props) => {\r\n    const { world, generation, color } = props;\r\n    this.setState({\r\n      world: world,\r\n      generation: generation,\r\n    });\r\n  };\r\n\r\n  // Handler Functions\r\n  onChange = (world) =>\r\n    this.changeState({ world: world, generation: this.state.generation + 1 });\r\n\r\n  // clears the board, sets generation to 0\r\n  onClear = () => this.changeState({ world: createWorld(), generation: 0 });\r\n\r\n  // starts the generation creation (speed is GEN_TIME)\r\n  onPlay = () => {\r\n    this.setState({ isPlaying: true });\r\n    this.interval = setInterval(() => this.onNext(), GEN_TIME);\r\n  };\r\n\r\n  // stops/pauses the generation creation\r\n  onStop = () => {\r\n    this.setState({ isPlaying: false });\r\n    clearInterval(this.interval);\r\n  };\r\n\r\n  // move to the next generation\r\n  onNext = () => this.onChange(nextGen(this.state.world));\r\n\r\n  // randomly fills the board\r\n  onShuffle = () =>\r\n    this.changeState({ world: randomFill(this.state.world), generation: 0 });\r\n\r\n  // loads settings\r\n  onSettingStyle = (settings) => {\r\n    const { update, setUpdate } = this.props;\r\n    const { gridSize, colorStyle, generationSpeed, preset } = settings;\r\n\r\n    getWorldSize(gridSize);\r\n    getSpeed(generationSpeed);\r\n\r\n    this.setState({\r\n      colorStyle: colorStyle,\r\n      gridSize: gridSize,\r\n      genSpeed: generationSpeed,\r\n      world: loadPreset(preset),\r\n      generation: 0,\r\n    });\r\n\r\n    UseStyling(colorStyle);\r\n\r\n    // setUpdate(!update);\r\n  };\r\n\r\n  render() {\r\n    // console.log(\"GameClass: \", this.state);\r\n    return (\r\n      <div className=\"game\">\r\n        <Grid\r\n          world={this.state.world}\r\n          onChange={this.onChange}\r\n          colorStyle={this.state.colorStyle}\r\n        />\r\n        <p>Generation: {this.state.generation}</p>\r\n        <Controls\r\n          clear={this.onClear}\r\n          isPlaying={this.state.isPlaying}\r\n          play={this.onPlay}\r\n          stop={this.onStop}\r\n          shuffle={this.onShuffle}\r\n          next={this.onNext}\r\n        />\r\n        <Settings isPlaying={this.state.isPlaying} load={this.onSettingStyle} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import * as React from \"react\";\r\nimport { extend, useThree, useFrame } from \"react-three-fiber\";\r\nimport { TrackballControls } from \"three/examples/jsm/controls/TrackballControls\";\r\nimport * as THREE from \"three\";\r\n\r\n// extend THREE to include TrackballControls\r\nextend({ TrackballControls });\r\n\r\n// key code constants\r\nconst ALT_KEY = 18;\r\nconst CTRL_KEY = 17;\r\nconst CMD_KEY = 91;\r\n\r\nconst Controls = ({}) => {\r\n  const controls = React.useRef();\r\n  const { camera, gl } = useThree();\r\n\r\n  useFrame(() => {\r\n    // update the view as the vis is interacted with\r\n    controls.current.update();\r\n  });\r\n\r\n  return (\r\n    <trackballControls\r\n      ref={controls}\r\n      args={[camera, gl.domElement]}\r\n      dynamicDampingFactor={0.1}\r\n      keys={[\r\n        ALT_KEY, // orbit\r\n        CTRL_KEY, // zoom\r\n        CMD_KEY, // pan\r\n      ]}\r\n      mouseButtons={{\r\n        LEFT: THREE.MOUSE.PAN, // make pan the default instead of rotate\r\n        MIDDLE: THREE.MOUSE.ZOOM,\r\n        RIGHT: THREE.MOUSE.ROTATE,\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Controls;\r\n","import React from \"react\";\r\nimport { Canvas } from \"react-three-fiber\";\r\nimport Controls from \"./Controls.jsx\";\r\n\r\n// camera position, values are 'units' away from object\r\nconst cam = {\r\n  x: 10,\r\n  y: 2,\r\n  z: 2,\r\n};\r\n\r\nconst ThreePointVis = ({ world }) => {\r\n  console.log(\"3point vis, world3d: \", world);\r\n  return (\r\n    <Canvas camera={{ position: [cam.x, cam.y, cam.z] }}>\r\n      <Controls />\r\n      {/* <ambientLight color=\"#bf0808\" intensity={0.1} /> */}\r\n      <hemisphereLight\r\n        color=\"#ffffff\"\r\n        skyColor=\"#ffffbb\"\r\n        groundColor=\"#080820\"\r\n        intensity={0.5}\r\n      />\r\n      {world.map((plane, i) => {\r\n        return plane.map((row, j) => {\r\n          return row.map((each, k) => {\r\n            const spacing = 1.1;\r\n            const x = i * spacing;\r\n            const y = j * spacing;\r\n            const z = k * spacing;\r\n            return world[i][j][k] === 1 ? (\r\n              <mesh key={`${i}${j}${k}`} position={[x, y, z]}>\r\n                <boxBufferGeometry attach=\"geometry\" args={[1, 1, 1]} />\r\n                <meshStandardMaterial\r\n                  attach=\"material\"\r\n                  color=\"rgb(4,255,255)\"\r\n                />\r\n              </mesh>\r\n            ) : (\r\n              <mesh key={`${i}${j}${k}`} position={[x, y, z]}>\r\n                <boxBufferGeometry attach=\"geometry\" args={[0, 0, 0]} />\r\n                <meshStandardMaterial\r\n                  attach=\"material\"\r\n                  // color=\"rgb(0,0,0)\"\r\n                  // opacity=\"0.2\"\r\n                  // transparent=\"true\"\r\n                />\r\n              </mesh>\r\n            );\r\n          });\r\n        });\r\n      })}\r\n    </Canvas>\r\n  );\r\n};\r\n\r\nexport default ThreePointVis;\r\n","import React from \"react\";\r\nimport { Button } from \"semantic-ui-react\";\r\n// install semantic-ui-css as well\r\n\r\nconst Controls3D = (props) => {\r\n  console.log(\"Controls3D>props: \", props);\r\n  const { isPlaying, play, next, stop } = props;\r\n  return (\r\n    <div>\r\n      <div className=\"controls\">\r\n        <Button\r\n          content=\"Shuffle\"\r\n          icon=\"random\"\r\n          labelPosition=\"right\"\r\n          onClick={props.shuffle}\r\n          disabled={props.playing}\r\n        />\r\n        <Button\r\n          content=\"Clear\"\r\n          icon=\"redo\"\r\n          labelPosition=\"right\"\r\n          onClick={props.clear}\r\n        />\r\n        <Button\r\n          content=\"Next\"\r\n          icon=\"right arrow\"\r\n          labelPosition=\"right\"\r\n          onClick={next}\r\n        />\r\n        {!isPlaying ? (\r\n          <Button content=\"Play\" icon=\"redo\" onClick={play} />\r\n        ) : (\r\n          <Button content=\"Stop\" icon=\"redo\" onClick={stop} />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Controls3D;\r\n","export let WORLD_SIZE_3D = 5; //make this changeable\r\nexport let GEN_TIME_3D = 1000; //milliseconds until next generation\r\nexport const ALIVE = 1;\r\nexport const DEAD = 0;\r\nexport let RULES = {\r\n  El: 5,\r\n  Eu: 6,\r\n  Fl: 6,\r\n  Fu: 6,\r\n};\r\n\r\n//Rules\r\nexport let Eu = 6;\r\nexport let Fl = 6;\r\nexport let El = 5;\r\nexport let Fu = 6;\r\n\r\nexport const setWorldSize = (gridSize) => {\r\n  WORLD_SIZE_3D = gridSize;\r\n  return WORLD_SIZE_3D;\r\n};\r\n\r\nexport const setSpeed = (genSpeed) => {\r\n  GEN_TIME_3D = genSpeed;\r\n  return GEN_TIME_3D;\r\n};\r\n\r\nexport const setRules = (rules) => {\r\n  RULES.El = rules.El;\r\n  RULES.Eu = rules.Eu;\r\n  RULES.Fl = rules.Fl;\r\n  RULES.Fu = rules.Fu;\r\n};\r\n\r\nexport const createWorld = () => {\r\n  return Array(WORLD_SIZE_3D) //creates an array of WORLD_SIZE_3D\r\n    .fill()\r\n    .map(\r\n      () =>\r\n        Array(WORLD_SIZE_3D) //creates a 2D array \"inside\" of 1st Array\r\n          .fill()\r\n          .map(() => Array(WORLD_SIZE_3D).fill(DEAD)) // creates a 3D array 'inside' the 2nd Array\r\n    );\r\n};\r\n\r\nexport const getNeighbors3D = (x, y, z) => {\r\n  // returns an array of MAXIMUM of 1x26 arrays\r\n  // --ONLY IF they are within 0 and WORLD_SIZE_3D\r\n  // each index is a 1x3 array of the x,y,z location of each neighbor\r\n  const ret = [\r\n    //top section\r\n    [x - 1, y - 1, z - 1],\r\n    [x, y - 1, z - 1],\r\n    [x + 1, y - 1, z - 1],\r\n    [x - 1, y, z - 1],\r\n    [x, y, z - 1],\r\n    [x + 1, y, z - 1],\r\n    [x - 1, y + 1, z - 1],\r\n    [x, y + 1, z - 1],\r\n    [x + 1, y + 1, z - 1],\r\n    //mid section\r\n    [x - 1, y - 1, z],\r\n    [x, y - 1, z],\r\n    [x + 1, y - 1, z],\r\n    [x - 1, y, z],\r\n    [x + 1, y, z],\r\n    [x - 1, y + 1, z],\r\n    [x, y + 1, z],\r\n    [x + 1, y + 1, z],\r\n    //bottom section\r\n    [x - 1, y - 1, z + 1],\r\n    [x, y - 1, z + 1],\r\n    [x + 1, y - 1, z + 1],\r\n    [x - 1, y, z + 1],\r\n    [x, y, z + 1],\r\n    [x + 1, y, z + 1],\r\n    [x - 1, y + 1, z + 1],\r\n    [x, y + 1, z + 1],\r\n    [x + 1, y + 1, z + 1],\r\n  ].filter((cell) => {\r\n    // if x,y,z of cell are within 0 and WORLD_SIZE_3D:\r\n    return (\r\n      cell[0] >= 0 &&\r\n      cell[0] < WORLD_SIZE_3D &&\r\n      cell[1] >= 0 &&\r\n      cell[1] < WORLD_SIZE_3D &&\r\n      cell[2] >= 0 &&\r\n      cell[2] < WORLD_SIZE_3D\r\n    );\r\n  });\r\n  return ret;\r\n};\r\n\r\nexport const aliveNeighbors = (world, x, y, z) => {\r\n  // aliveNeighbors returns an array\r\n  const res = getNeighbors3D(x, y, z).filter((cell) => {\r\n    // getNeighbors3D => returns a 1x26 array of cells (1x3 arrays with [x,y,z] coords)\r\n    // then => filter through each 1x3 array, and testing if they are \"ALIVE\"\r\n    // ex:\r\n    // cell = [cell[0], cell[1], cell[2]] = [2, 1, 2]\r\n    return world[cell[0]][cell[1]][cell[2]] === ALIVE;\r\n    // getNeighbors array returns ONLY cells that are ALIVE===1\r\n  }).length;\r\n  // .length converts getNeighbors into a count of the number of Cells that are ALIVE\r\n  return res;\r\n};\r\n\r\nexport const nextGen = (world) => {\r\n  let newWorld = createWorld();\r\n  // console.log(\"nextGen: \", newWorld, world);\r\n  for (let x = 0; x < WORLD_SIZE_3D; x++) {\r\n    for (let y = 0; y < WORLD_SIZE_3D; y++) {\r\n      for (let z = 0; z < WORLD_SIZE_3D; z++) {\r\n        const alive = aliveNeighbors(world, x, y, z);\r\n        const cell = world[x][y][z];\r\n        // sets the \"rules\" that determine how the generations persist\r\n        const El = RULES.El;\r\n        const Eu = RULES.Eu;\r\n        const Fl = RULES.Fl;\r\n        const Fu = RULES.Fu;\r\n        // 4333 relates to\r\n        newWorld[x][y][z] =\r\n          // alive === 6 || (alive === 5 && cell === ALIVE) ? ALIVE : DEAD;\r\n          (cell === ALIVE && El <= alive && alive <= Eu) ||\r\n          (cell === DEAD && Fl <= alive && alive <= Fu)\r\n            ? ALIVE\r\n            : DEAD;\r\n      }\r\n    }\r\n  }\r\n  return newWorld;\r\n};\r\n\r\nexport const changeArray = (arr, i, value) => {\r\n  return [...arr.slice(0, i), value, ...arr.slice(i + 1)];\r\n};\r\n\r\nexport const randomFill = (world) => {\r\n  // Take a 3D array (world), then map through each 2D array (plane), then map through each 1D array (row):\r\n  // fill each cell with a 1 or 0 (Math.round(Math.random()))\r\n  return world.map((plane) =>\r\n    plane.map((row) => row.map((cell) => Math.round(Math.random())))\r\n  );\r\n};\r\n\r\n/*\r\n//\r\n//\r\nexport let WORLD_SIZE_3D = 8; //make this changeable\r\nexport let GEN_TIME_3D = 1000; //milliseconds until next generation\r\nexport const ALIVE = 1;\r\nexport const DEAD = 0;\r\n\r\nexport const get3DWorldSize = (gridSize) => {\r\n  WORLD_SIZE_3D = gridSize;\r\n  return WORLD_SIZE_3D;\r\n};\r\n\r\nexport const get3DSpeed = (genSpeed) => {\r\n  GEN_TIME_3D = genSpeed;\r\n  return GEN_TIME_3D;\r\n};\r\n\r\nexport const create3DWorld = () => {\r\n  return Array(WORLD_SIZE_3D) //creates an array of WORLD_SIZE_3D\r\n    .fill()\r\n    .map(\r\n      () =>\r\n        Array(WORLD_SIZE_3D) //creates a 2D array \"inside\" of 1st Array\r\n          .fill()\r\n          .map(() => Array(WORLD_SIZE_3D).fill(DEAD)) // creates a 3D array 'inside' the 2nd Array\r\n    );\r\n};\r\n\r\nexport const getNeighbors3D = (x, y, z) => {\r\n  // returns an array of MAXIMUM of 1x26 arrays\r\n  // --ONLY IF they are within 0 and WORLD_SIZE_3D\r\n  // each index is a 1x3 array of the x,y,z location of each neighbor\r\n  const ret = [\r\n    //top section\r\n    [x - 1, y - 1, z - 1],\r\n    [x, y - 1, z - 1],\r\n    [x + 1, y - 1, z - 1],\r\n    [x - 1, y, z - 1],\r\n    [x, y, z - 1],\r\n    [x + 1, y, z - 1],\r\n    [x - 1, y + 1, z - 1],\r\n    [x, y + 1, z - 1],\r\n    [x + 1, y + 1, z - 1],\r\n    //mid section\r\n    [x - 1, y - 1, z],\r\n    [x, y - 1, z],\r\n    [x + 1, y - 1, z],\r\n    [x - 1, y, z],\r\n    [x + 1, y, z],\r\n    [x - 1, y + 1, z],\r\n    [x, y + 1, z],\r\n    [x + 1, y + 1, z],\r\n    //bottom section\r\n    [x - 1, y - 1, z + 1],\r\n    [x, y - 1, z + 1],\r\n    [x + 1, y - 1, z + 1],\r\n    [x - 1, y, z + 1],\r\n    [x, y, z + 1],\r\n    [x + 1, y, z + 1],\r\n    [x - 1, y + 1, z + 1],\r\n    [x, y + 1, z + 1],\r\n    [x + 1, y + 1, z + 1],\r\n  ].filter((cell) => {\r\n    // if x,y,z of cell are within 0 and WORLD_SIZE_3D:\r\n    return (\r\n      cell[0] >= 0 &&\r\n      cell[0] < WORLD_SIZE_3D &&\r\n      cell[1] >= 0 &&\r\n      cell[1] < WORLD_SIZE_3D &&\r\n      cell[2] >= 0 &&\r\n      cell[2] < WORLD_SIZE_3D\r\n    );\r\n  });\r\n  return ret;\r\n};\r\n\r\nexport const aliveNeighbors = (world, x, y, z) => {\r\n  // aliveNeighbors returns an array\r\n  const res = getNeighbors3D(x, y, z).filter((cell) => {\r\n    // getNeighbors3D => returns a 1x26 array of cells (1x3 arrays with [x,y,z] coords)\r\n    // then => filter through each 1x3 array, and testing if they are \"ALIVE\"\r\n    // ex:\r\n    // cell = [cell[0], cell[1], cell[2]] = [2, 1, 2]\r\n    return world[cell[0]][cell[1]][cell[2]] === ALIVE;\r\n    // getNeighbors array returns ONLY cells that are ALIVE===1\r\n  }).length;\r\n  // .length converts getNeighbors into a count of the number of Cells that are ALIVE\r\n  return res;\r\n};\r\n\r\nexport const nextGen = (world) => {\r\n  let newWorld = create3DWorld();\r\n  for (let x = 0; x < WORLD_SIZE_3D; x++) {\r\n    for (let y = 0; y < WORLD_SIZE_3D; y++) {\r\n      for (let z = 0; z < WORLD_SIZE_3D; z++) {\r\n        const alive = aliveNeighbors(world, x, y, z);\r\n        const cell = world[x][y][z];\r\n        // console.log(\"nextGen, aliveNeighbor:\", alive, cell);\r\n        newWorld[x][y][z] =\r\n          // 4333 relates to\r\n          alive === 4 || (alive === 5 && cell === ALIVE) ? ALIVE : DEAD;\r\n      }\r\n    }\r\n  }\r\n  return newWorld;\r\n};\r\n\r\nexport const changeArray = (arr, i, value) => {\r\n  // console.log(\"changeArray: \", arr, i, value);\r\n  return [...arr.slice(0, i), value, ...arr.slice(i + 1)];\r\n};\r\n\r\nexport const randomFill = (world) => {\r\n  // Take a 3D array (world), then map through each 2D array (plane), then map through each 1D array (row):\r\n  // fill each cell with a 1 or 0 (Math.round(Math.random()))\r\n  return world.map((plane) =>\r\n    plane.map((row) => row.map((cell) => Math.round(Math.random())))\r\n  );\r\n};\r\n//\r\n//\r\n//\r\n*/\r\n","// import { ALIVE, WORLD_SIZE_3D, create3DWorld } from \"./game3D.jsx\";\r\nimport { ALIVE, WORLD_SIZE_3D, createWorld } from \"./game3D.jsx\";\r\n\r\nexport const presetOptions = [\r\n  { key: \"box\", value: \"box\", text: \"Box\" },\r\n  { key: \"plane\", value: \"plane\", text: \"plane\" },\r\n  // { key: \"cross\", value: \"cross\", text: \"Cross\" },\r\n  // { key: \"thickCross\", value: \"thickCross\", text: \"Thick Cross\" },\r\n  { key: \"plus\", value: \"plus\", text: \"Plus\" },\r\n  // { key: \"glider\", value: \"glider\", text: \"Glider\" },\r\n];\r\n\r\nexport const loadPreset = (preset) => {\r\n  let newWorld = createWorld();\r\n  const half = Math.floor(WORLD_SIZE_3D / 2);\r\n  console.log(\"presets3D.jsx>loadPreset\", preset);\r\n  switch (preset.toLowerCase()) {\r\n    case \"box\":\r\n      return box(newWorld, half);\r\n    case \"plane\":\r\n      return plane(newWorld, half);\r\n    case \"glider\":\r\n      return glider(newWorld, half);\r\n    case \"cross\":\r\n      return cross(newWorld, half);\r\n    case \"thickCross\":\r\n      return thickCross(newWorld, half);\r\n    case \"plus\":\r\n      return plus(newWorld, half);\r\n    default:\r\n      return newWorld;\r\n  }\r\n};\r\n\r\nconst toBlock = (world, x0, y0) => {\r\n  world[y0][x0] = ALIVE;\r\n  world[y0 - 1][x0] = ALIVE;\r\n  world[y0][x0 + 1] = ALIVE;\r\n  world[y0 - 1][x0 + 1] = ALIVE;\r\n  return world;\r\n};\r\n\r\nconst toEgg = (world, y0, x0) => {\r\n  world[x0][y0] = ALIVE;\r\n  world[x0][y0 + 6] = ALIVE;\r\n  world[x0][y0 + 4] = ALIVE;\r\n  world[x0][y0 + 7] = ALIVE;\r\n  for (let i = 0; i < 3; i++) {\r\n    world[x0 + 1 + i][y0 + i] = ALIVE;\r\n    world[x0 - 1 - i][y0 + i] = ALIVE;\r\n  }\r\n  world[x0 + 3][y0 + 3] = ALIVE;\r\n  world[x0 + 2][y0 + 5] = ALIVE;\r\n  world[x0 + 1][y0 + 6] = ALIVE;\r\n  world[x0 - 3][y0 + 3] = ALIVE;\r\n  world[x0 - 2][y0 + 5] = ALIVE;\r\n  world[x0 - 1][y0 + 6] = ALIVE;\r\n\r\n  return world;\r\n};\r\n\r\nconst ship1 = (world, y0, x0) => {\r\n  world[x0][y0] = ALIVE;\r\n  world[x0][y0 + 1] = ALIVE;\r\n  world[x0 - 1][y0] = ALIVE;\r\n  world[x0 - 1][y0 + 1] = ALIVE;\r\n  world[x0 - 2][y0 + 2] = ALIVE;\r\n  world[x0 - 2][y0 + 4] = ALIVE;\r\n  world[x0 - 3][y0 + 4] = ALIVE;\r\n  //mirror?\r\n  world[x0 + 1][y0] = ALIVE;\r\n  world[x0 + 1][y0 + 1] = ALIVE;\r\n  world[x0 + 1][y0 + 1] = ALIVE;\r\n  world[x0 + 2][y0 + 2] = ALIVE;\r\n  world[x0 + 2][y0 + 4] = ALIVE;\r\n  world[x0 + 3][y0 + 4] = ALIVE;\r\n  return world;\r\n};\r\n\r\nconst toMirror = (world, i, x, y, axis) => {\r\n  // world is the array, i is the starting reference, x/y are how much we're moving, axis is the axis to mirror\r\n  world[i + x][i + y] = ALIVE;\r\n  if (axis === \"x\") {\r\n    // mirror across x-axis\r\n    world[i - x][i + y] = ALIVE;\r\n  } else if (axis === \"y\") {\r\n    // mirror across y-axis\r\n    world[i + x][i - y] = ALIVE;\r\n  } else if (axis === \"dia\") {\r\n    // mirror across diagonal axis\r\n    world[i + y][i + x] = ALIVE;\r\n  } else if (axis === \"quad\") {\r\n    // mirror across x and y-axis (all 4 quadrants)\r\n    world[i + x][i + y] = ALIVE;\r\n    world[i - x][i + y] = ALIVE;\r\n    world[i + x][i - y] = ALIVE;\r\n    world[i - x][i - y] = ALIVE;\r\n  }\r\n  return world;\r\n};\r\n\r\nconst box = (world, half) => {\r\n  // 3d works\r\n  const start = Math.ceil(half / 2);\r\n  const boxSize = half + start;\r\n  for (let i = start; i < boxSize; i++) {\r\n    for (let j = start; j < boxSize; j++) {\r\n      for (let k = start; k < boxSize; k++) {\r\n        world[i][j][k] = ALIVE;\r\n      }\r\n    }\r\n  }\r\n  return world;\r\n};\r\n\r\nconst plane = (world, half) => {\r\n  // 3d works\r\n  // console.log(\"plane: \", world, world[half], world[1][1][1]);\r\n  world[half].map((row, j) => {\r\n    // console.log(\"plane, row:\", row);\r\n    return world[half][j].fill(ALIVE);\r\n  });\r\n  return world;\r\n};\r\n\r\nconst plus = (world, half) => {\r\n  //3d works\r\n  for (let i = 0; i < WORLD_SIZE_3D; i++) {\r\n    world[i][half][half] = ALIVE;\r\n    world[half][i][half] = ALIVE;\r\n    world[half][half][i] = ALIVE;\r\n  }\r\n  return world;\r\n};\r\n\r\nconst cross = (world, half) => {\r\n  const n = world.length - 1;\r\n  for (let i = 0; i < n / 2; i++) {\r\n    world = toMirror(world, half, i, i, \"quad\");\r\n  }\r\n  return world;\r\n};\r\n\r\nconst thickCross = (world, half) => {\r\n  const n = world.length - 8;\r\n  for (let i = 0; i < n / 2; i++) {\r\n    world = toMirror(world, half, i, i, \"quad\");\r\n    world = toMirror(world, half, i, i - 1, \"quad\");\r\n    world = toMirror(world, half, i, i - 2, \"quad\");\r\n    world = toMirror(world, half, i, i + 1, \"quad\");\r\n    world = toMirror(world, half, i, i + 2, \"quad\");\r\n  }\r\n  return world;\r\n};\r\n\r\nconst glider = (world, startX, startY) => {\r\n  const half = Math.floor(WORLD_SIZE_3D / 2);\r\n  const x = half;\r\n  const y = half;\r\n  world[x][y] = ALIVE;\r\n  world[x][y + 1] = ALIVE;\r\n  world[x][y + 2] = ALIVE;\r\n  world[x - 1][y] = ALIVE;\r\n  world[x - 2][y + 1] = ALIVE;\r\n  return world;\r\n};\r\n\r\nconst pulsar = (world, half) => {\r\n  for (let i = 2; i <= 4; i++) {\r\n    world = toMirror(world, half, i, 1, \"quad\");\r\n    world = toMirror(world, half, i, 6, \"quad\");\r\n    world = toMirror(world, half, 1, i, \"quad\");\r\n    world = toMirror(world, half, 6, i, \"quad\");\r\n  }\r\n  return world;\r\n};\r\n\r\nconst diehard = (world, half) => {\r\n  return world;\r\n};\r\n\r\nconst gliderGunSE = (world, half, x, y) => {\r\n  // BLOCKS\r\n  world = toBlock(world, half - 18 - x, half + 1 - y);\r\n  world = toBlock(world, half + 16 - x, half - 1 - y);\r\n  // Left side ship\r\n  world = toEgg(world, half - 8 - x, half + 1 - y);\r\n  // Right side ship\r\n  world = ship1(world, half + 2 - x, half - 1 - y);\r\n  return world;\r\n};\r\n\r\nconst gliderGunNE = (world, half, x, y) => {\r\n  // BLOCKS\r\n  world = toBlock(world, half - 18 - x, half - 1 - y);\r\n  world = toBlock(world, half + 16 - x, half + 1 - y);\r\n  // Left side ship\r\n  world = toEgg(world, half - 8 - x, half - 1 - y);\r\n  // Right side ship\r\n  world = ship1(world, half + 2 - x, half + 1 - y);\r\n  return world;\r\n};\r\n\r\nconst duelingGliderGuns = (world, half) => {\r\n  world = gliderGunSE(world, half, 8, 10);\r\n  world = gliderGunNE(world, half, 8, -10);\r\n  return world;\r\n};\r\n\r\nconst infiniteGrowth = (world, half) => {\r\n  const x = half - 20;\r\n  world[half].splice(x, 8, 1, 1, 1, 1, 1, 1, 1, 1);\r\n  world[half].splice(x + 9, 5, 1, 1, 1, 1, 1);\r\n  world[half].splice(x + 17, 3, 1, 1, 1);\r\n  world[half].splice(x + 26, 7, 1, 1, 1, 1, 1, 1, 1);\r\n  world[half].splice(x + 34, 5, 1, 1, 1, 1, 1);\r\n  return world;\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Dropdown, Button } from \"semantic-ui-react\";\r\n// import Presets from \"./Presets.jsx\";\r\n\r\nimport {\r\n  colorOptions,\r\n  gridSizeOptions,\r\n  grid3DSizeOptions,\r\n  generationSpeed,\r\n} from \"../files/settings.jsx\";\r\nimport { loadPreset, presetOptions } from \"../files/presets3D.jsx\";\r\n\r\nimport \"./styles3D.scss\";\r\n\r\nconst Settings3D = (props) => {\r\n  console.log(\"settings3d: \", props);\r\n  const { load, isPlaying, styleChange, changeStyle } = props;\r\n  // const { gridSize, generationSpeed, colorStyle } = props.state;\r\n\r\n  const [settings, setSettings] = useState({\r\n    preset: \"\",\r\n    colorStyle: \"\",\r\n    gridSize: \"\",\r\n    generationSpeed: \"\",\r\n  });\r\n\r\n  const onLoad = () => {\r\n    return styleChange(settings);\r\n  };\r\n\r\n  const [rules, setRules] = useState({\r\n    a: 4,\r\n    b: 5,\r\n    c: 5,\r\n    d: 5,\r\n  });\r\n\r\n  const onChangeRules = (id, val) => {\r\n    console.log(\"onChangeRules: \", id, val);\r\n    setRules({\r\n      ...rules,\r\n      [id]: parseInt(val),\r\n    });\r\n  };\r\n\r\n  // const onChangeRules = (e, value) =>\r\n  // const onSubmit = (props) => {\r\n  //   props.preventDefault();\r\n  //   console.log(\"onSubmit\", rules);\r\n  // };\r\n\r\n  return (\r\n    <div className=\"settings\" id=\"setting-right\">\r\n      {/* <Button as=\"div\" labelPosition=\"left\" className=\"set-3D-div\"> */}\r\n      <div className=\"settings-sect\">\r\n        <Dropdown\r\n          // styling didn't work until I added <link rel='stylesheet\" href='...'/> to the index.html file.\r\n          id=\"preset\"\r\n          placeholder=\"Select a preset\"\r\n          options={presetOptions}\r\n          selection\r\n          className=\"label_setting\"\r\n          disabled={isPlaying}\r\n          value={settings.preset}\r\n          onChange={(e, { value }) => {\r\n            setSettings({ ...settings, preset: `${value}` });\r\n          }}\r\n        />\r\n        <Dropdown\r\n          id=\"colorStyle\"\r\n          placeholder=\"Color Theme\"\r\n          options={colorOptions}\r\n          selection\r\n          className=\"label_setting\"\r\n          disabled={isPlaying}\r\n          value={settings.colorStyle}\r\n          onChange={(e, { value }) => {\r\n            setSettings({ ...settings, colorStyle: `${value}` });\r\n          }}\r\n        />\r\n      </div>\r\n      <div className=\"settings-sect\">\r\n        <Dropdown\r\n          id=\"gridSize\"\r\n          placeholder=\"Grid Size\"\r\n          options={grid3DSizeOptions}\r\n          selection\r\n          className=\"label_setting\"\r\n          disabled={isPlaying}\r\n          value={settings.gridSize}\r\n          onChange={(e, { value }) => {\r\n            setSettings({ ...settings, gridSize: value });\r\n          }}\r\n        />\r\n        <Dropdown\r\n          id=\"generationSpeed\"\r\n          placeholder=\"Generation Speed\"\r\n          options={generationSpeed}\r\n          selection\r\n          className=\"label_setting\"\r\n          disabled={isPlaying}\r\n          value={settings.generationSpeed}\r\n          onChange={(e, { value }) => {\r\n            setSettings({ ...settings, generationSpeed: value });\r\n          }}\r\n        />\r\n      </div>\r\n      <Button\r\n        id=\"setting-load\"\r\n        content=\"Load\"\r\n        onClick={onLoad}\r\n        disabled={isPlaying}\r\n      />\r\n      {/* </Button> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Settings3D;\r\n","import React from \"react\";\r\nimport { Button } from \"semantic-ui-react\";\r\n\r\nconst Rules = (props) => {\r\n  const { onSubmit, onChangeRules, rules, setRules, isPlaying, load } = props;\r\n  console.log(\"Rules,props:\", props);\r\n  return (\r\n    <form className=\"settings\" onSubmit={onSubmit}>\r\n      <div className=\"settings-sect\">\r\n        <label>El: </label>\r\n        <input\r\n          id=\"El\"\r\n          type=\"number\"\r\n          className=\"rule_input\"\r\n          value={rules.El}\r\n          min=\"0\"\r\n          max=\"26\"\r\n          onChange={(e, value) => onChangeRules(e.target.id, e.target.value)}\r\n        />\r\n        <label>Eu: </label>\r\n        <input\r\n          id=\"Eu\"\r\n          type=\"number\"\r\n          className=\"rule_input\"\r\n          value={rules.Eu}\r\n          min=\"0\"\r\n          max=\"26\"\r\n          onChange={(e, value) => onChangeRules(e.target.id, e.target.value)}\r\n        />\r\n      </div>\r\n      <div className=\"settings-sect\">\r\n        <label>Fl: </label>\r\n        <input\r\n          id=\"Fl\"\r\n          type=\"number\"\r\n          className=\"rule_input\"\r\n          value={rules.Fl}\r\n          min=\"0\"\r\n          max=\"26\"\r\n          onChange={(e, value) => onChangeRules(e.target.id, e.target.value)}\r\n        />\r\n        <label>Fu: </label>\r\n        <input\r\n          id=\"Fu\"\r\n          type=\"number\"\r\n          className=\"rule_input\"\r\n          value={rules.Fu}\r\n          min=\"0\"\r\n          max=\"26\"\r\n          onChange={(e, value) => onChangeRules(e.target.id, e.target.value)}\r\n        />\r\n      </div>\r\n      <Button\r\n        content=\"Load Rules\"\r\n        onClick={(e) => load(e)}\r\n        disabled={isPlaying}\r\n      />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Rules;\r\n","import React from \"react\";\r\n\r\nconst Rules = () => {\r\n  return (\r\n    <div className=\"description-container\">\r\n      <h2>GAME OF LIFE</h2>\r\n      <h3>wikipedia: </h3>{\" \"}\r\n      <a href=\"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\">\r\n        Game of Life\r\n      </a>\r\n      <div className=\"rules-equation\">\r\n        <p className=\"rules-p\">\r\n          A generic equation for defining a living cell can be written as: R=(E\r\n          <sub>l</sub>,E\r\n          <sub>u</sub>\r\n          ,F<sub>l</sub>,F<sub>u</sub>)\r\n        </p>\r\n        <span>Where:</span>\r\n        <p className=\"rules-p\">\r\n          <ul className=\"generic\">\r\n            <li>\r\n              E<sub>l</sub>&#x2264; E &#8804;<sub>u</sub> = Rules for a LIVING\r\n              cell to stay ALIVE\r\n            </li>\r\n            <li>\r\n              F<sub>l</sub>&#x2264; F &#8804;<sub>u</sub> = Rules for a DEAD\r\n              cell to become ALIVE\r\n            </li>\r\n            <br />\r\n            <li>\r\n              E<sub>l</sub> & F<sub>l</sub>= Lower limit\r\n            </li>\r\n            <li>\r\n              E<sub>u</sub> & F<sub>u</sub> = Upper Limit\r\n            </li>\r\n          </ul>\r\n        </p>\r\n      </div>\r\n      <p className=\"rules-p\">\r\n        The universe of the Game of Life is an infinite, two-dimensional\r\n        orthogonal grid of square cells, each of which is in one of two possible\r\n        states, alive or dead, (populated or unpopulated, respectively). Every\r\n        cell interacts with its eight neighbours, which are the cells that are\r\n        horizontally, vertically, or diagonally adjacent. At each step in time,\r\n        the following transitions occur:\r\n      </p>\r\n      <ol className=\"rules-list\">\r\n        <li>\r\n          Any live cell with fewer than E<sub>l</sub> live neighbours dies\r\n          (underpopulation).\r\n        </li>\r\n        <li>\r\n          Any live cell within E<sub>l</sub> or E<sub>u</sub> live neighbours\r\n          lives on to the next generation.\r\n        </li>\r\n        <li>\r\n          Any live cell with more than E<sub>u</sub> live neighbours dies, as if\r\n          by overpopulation.\r\n        </li>\r\n        <li>\r\n          Any dead cell within F<sub>l</sub> and F<sub>u</sub> live neighbours\r\n          becomes a live cell, as if by reproduction.\r\n        </li>\r\n      </ol>\r\n      <p className=\"rules-p\">\r\n        Conway's Game of Life follows the R=(2333) rules, which compare the\r\n        behavior of the automaton to real life and can be condensed into the\r\n        following:\r\n      </p>\r\n      <ol className=\"rules-list\">\r\n        <li>Any live cell with two or three live neighbours survives.</li>\r\n        <li>Any dead cell with three live neighbours becomes a live cell.</li>\r\n        <li>\r\n          All other live cells die in the next generation. Similarly, all other\r\n          dead cells stay dead.\r\n        </li>\r\n      </ol>\r\n      <p className=\"rules-p\">\r\n        The initial pattern constitutes the seed of the system. The first\r\n        generation is created by applying the above rules simultaneously to\r\n        every cell in the seed; births and deaths occur simultaneously, and the\r\n        discrete moment at which this happens is sometimes called a tick. Each\r\n        generation is a pure function of the preceding one. The rules continue\r\n        to be applied repeatedly to create further generations.\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Rules;\r\n","import React from \"react\";\r\nimport ThreePointVis from \"./ThreePointVis.jsx\";\r\nimport Controls3D from \"./Controls3D.jsx\";\r\nimport Settings3D from \"./Settings3D.jsx\";\r\nimport Rules from \"../settings/Rules.jsx\";\r\nimport { Divider } from \"semantic-ui-react\";\r\n\r\nimport {\r\n  // variables:\r\n  WORLD_SIZE_3D,\r\n  GEN_TIME_3D,\r\n  // functions:\r\n  createWorld,\r\n  nextGen,\r\n  randomFill,\r\n  setSpeed,\r\n  setWorldSize,\r\n  setRules,\r\n} from \"../files/game3D.jsx\";\r\nimport { loadPreset } from \"../files/presets3D.jsx\";\r\n\r\nimport \"./styles3D.scss\";\r\n\r\nclass Game3DClassTest extends React.Component {\r\n  state = {\r\n    world3D: loadPreset(\"plane\"),\r\n    generation: 0,\r\n    isPlaying: false,\r\n    colorStyle: \"default\",\r\n    generationSpeed: GEN_TIME_3D,\r\n    gridSize: WORLD_SIZE_3D,\r\n    rules: { El: 5, Eu: 6, Fl: 6, Fu: 6 },\r\n  };\r\n\r\n  changeState = (props) => {\r\n    console.log(\"changeState: \", props);\r\n    const { world3D, generation } = props;\r\n    this.setState({ world3D: world3D, generation: generation });\r\n  };\r\n\r\n  onChange = (world) => {\r\n    console.log(\"onChange: \", world);\r\n    this.changeState({ world3D: world, generation: this.state.generation + 1 });\r\n  };\r\n\r\n  onPlay = () => {\r\n    console.log(\"3D onPlay: \", this.state.world3D);\r\n    this.setState({ isPlaying: true });\r\n    this.interval = setInterval(() => {\r\n      this.onNext();\r\n    }, 500);\r\n  };\r\n\r\n  onNext = () => {\r\n    this.onChange(nextGen(this.state.world3D));\r\n  };\r\n\r\n  onStop = () => {\r\n    console.log(\"onStop...\");\r\n    this.setState({ isPlaying: false });\r\n    clearInterval(this.interval);\r\n  };\r\n\r\n  onSettingStyle = (settings) => {\r\n    const { colorStyle, gridSize, preset, generationSpeed } = settings;\r\n\r\n    setWorldSize(gridSize);\r\n    setSpeed(generationSpeed);\r\n\r\n    this.setState({\r\n      world3D: loadPreset(preset),\r\n      generation: generationSpeed,\r\n      colorStyle: colorStyle,\r\n      gridSize: gridSize,\r\n    });\r\n  };\r\n\r\n  onShuffle = () => {\r\n    this.changeState({\r\n      world3D: randomFill(this.state.world3D),\r\n      generation: 0,\r\n    });\r\n  };\r\n\r\n  onClear = () => {\r\n    this.changeState({ world3D: createWorld(), generation: 0 });\r\n  };\r\n\r\n  onChangeRules = (id, val) => {\r\n    this.setState({\r\n      ...this.state,\r\n      rules: {\r\n        ...this.state.rules,\r\n        [id]: parseInt(val),\r\n      },\r\n    });\r\n  };\r\n\r\n  onSetRules = (e) => {\r\n    e.preventDefault();\r\n    setRules(this.state.rules); // currently not changing the rules....\r\n  };\r\n\r\n  render() {\r\n    // console.log(\"3D World: \", this.state);\r\n    return (\r\n      <div className=\"container-3D\">\r\n        <div className=\"settings-div\">\r\n          <Rules\r\n            rules={this.state.rules}\r\n            onChangeRules={this.onChangeRules}\r\n            load={this.onSetRules}\r\n          />\r\n          <Settings3D\r\n            isPlaying={this.state.isPlaying}\r\n            load={this.onSettingStyle}\r\n            state={this.state}\r\n            styleChange={this.onSettingStyle}\r\n            changeStyle={this.onChangeStyle}\r\n          />\r\n        </div>\r\n        <div className=\"vis-container\">\r\n          <ThreePointVis world={this.state.world3D} />\r\n        </div>\r\n        <p>Generation: {this.state.generation}</p>\r\n        <Controls3D\r\n          isPlaying={this.state.isPlaying}\r\n          play={this.onPlay}\r\n          next={this.onNext}\r\n          stop={this.onStop}\r\n          shuffle={this.onShuffle}\r\n          clear={this.onClear}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game3DClassTest;\r\n","import React from \"react\";\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div className=\"description-container\">\r\n      <h2>Welcome to my Game of Life Simulator</h2>\r\n      <h3>Project by: Brett Karr</h3>\r\n      <h4>originally inspired by: John Conway</h4>\r\n      <p>\r\n        This is a personal project that is designed to implement John Conway's\r\n        Game of Life. The Game of Life is represented by a world (a 2D or 3D\r\n        grid), that is populated by living or dead cells, and each cell lives or\r\n        dies based on conditions. Living cells are represented by an \"on\" state\r\n        (typically highlighted, filled in, or colored cells), and dead cells are\r\n        represented by a \"dead\" state.\r\n      </p>\r\n      <p>\r\n        The original start of this project was to implement a 2D design to\r\n        represent the Game of Life. After completing the 2D portion, I decided\r\n        to tackle the implementation of a 3D grid. I hope you enjoy!\r\n      </p>\r\n      <span>For this App, I implemented:</span>\r\n      <ul>\r\n        <li>React.js</li>\r\n        <li>Javascript</li>\r\n        <li>CSS/html</li>\r\n        <li>Three.js</li>\r\n        <li>systemic-ui-react</li>\r\n        <li>misc styling components</li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  NavLink as Link,\r\n} from \"react-router-dom\";\r\n\r\nimport { Divider, Header, Button } from \"semantic-ui-react\";\r\n// import \"./Navbar.css\";\r\n\r\nconst Navbar = () => {\r\n  const [dimension, setDimension] = useState(true);\r\n\r\n  const onDimension = () => {\r\n    setDimension(!dimension);\r\n  };\r\n  return (\r\n    <div className=\"navbar\">\r\n      <Header as=\"h2\" textAlign=\"center\" className=\"title\">\r\n        Game Of Life\r\n      </Header>\r\n      <div className=\"button-div\">\r\n        <Link to={\"/\"}>\r\n          <Button content=\"Home\" icon=\"redo\" onClick={onDimension} />\r\n        </Link>\r\n        <Link to={\"/2D\"}>\r\n          <Button content=\"2D\" icon=\"redo\" onClick={onDimension} />\r\n        </Link>\r\n        <Link to={\"/3D\"}>\r\n          <Button content=\"3D\" icon=\"redo\" onClick={onDimension} />\r\n        </Link>\r\n        <Link to={\"/rules\"}>\r\n          <Button content=\"Rules\" icon=\"redo\" onClick={onDimension} />\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.scss\";\nimport GameClass from \"./components/Game/GameClass.jsx\";\n// import Game3DClass from \"./components/3D/Game3DClass.jsx\";\nimport Game3DClassTest from \"./components/3D/Game3DClassTest.jsx\";\n\nimport Rules from \"./components/Rules.jsx\";\nimport Home from \"./components/Home.jsx\";\n\nimport Navbar from \"./components/Navbar.jsx\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nfunction App() {\n  const [didUpdate, setUpdate] = useState(false);\n\n  // dimension is true = 2D; dimension is false = 3D\n  const [dimension, setDimension] = useState(true);\n\n  const onDimension = () => {\n    setDimension(!dimension);\n  };\n\n  useEffect(() => {\n    console.log(\"did update\");\n  }, [didUpdate]);\n\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <div className=\"GameDisplay\">\n        <Switch>\n          <Route exact path={\"/\"} component={Home} />\n          <Route\n            exact\n            path={\"/2D\"}\n            // component={GameClass(didUpdate, setUpdate)}\n            render={() => (\n              <GameClass update={didUpdate} setUpdate={setUpdate} />\n            )}\n          />\n          <Route\n            exact\n            path={\"/3D\"}\n            // component={Game3D}\n            // render={() => <Game3D update={didUpdate} setUpdate={setUpdate} />}\n            render={() => (\n              // <Game3DClass update={didUpdate} setUpdate={setUpdate} />\n              <Game3DClassTest update={didUpdate} setUpdate={setUpdate} />\n            )}\n          />\n          <Route exact path={\"/rules\"} render={() => <Rules />} />\n        </Switch>\n      </div>\n      {/* </Router> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\n// const port = process.env.PORT || 9876;\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}